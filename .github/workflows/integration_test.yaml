name: Integration tests

on: [pull_request, workflow_dispatch]

jobs:
  integration-test:
    name: job job
    runs-on: [self-hosted, linux, X64, jammy, large]
    # timeout-minutes: 120
    steps:
      - name: (self-hosted) Install pipx
        run: |
          sudo apt-get update
          sudo apt-get install python3-pip python3-venv -y
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
      - name: Install tox & poetry
        run: |
          pipx install tox
          pipx install poetry
      - name: (self-hosted) Disk usage
        run: df --human-readable
      - name: Install CLI
        run: |
          pipx install git+https://github.com/canonical/data-platform-workflows@'self-hosted-k8s'#subdirectory=python/cli
      - name: Parse cloud input
        id: parse-cloud
        shell: python
        run: |
          import json
          import os
          
          CLOUD = "microk8s"
          self_hosted = json.loads("false")
          assert isinstance(self_hosted, bool)
          if CLOUD == "lxd":
            group = "lxd"
          elif CLOUD == "microk8s":
            if self_hosted:
              raise ValueError("microk8s not supported on self-hosted runners")
            SNAP_CHANNEL = "1.28-strict/stable"
            assert (
              SNAP_CHANNEL != ""
            ), '`microk8s-snap-channel` input required if `cloud` is "microk8s"'
            assert "strict" in SNAP_CHANNEL.lower(), "Only strict microk8s snap supported"
            group = "snap_microk8s"
          else:
            raise ValueError(f"`cloud` input not recognized: ***CLOUD***")
          output = "group=snap_microk8s"
          print(output)
          with open(os.environ["GITHUB_OUTPUT"], "a") as file:
            file.write(output)
      - name: Parse Juju agent version & snap channel
        id: parse-versions
        shell: python
        run: |
          import os
  
          AGENT_VERSION = "2.9.46"
          snap_channel = ""
          if not snap_channel:
              if AGENT_VERSION:
                  major, minor, patch = AGENT_VERSION.split(".")
                  snap_channel = f"2.9/stable"
              else:
                  raise Exception(
                      "`juju-snap-channel` required if `juju-agent-version` is not passed"
                  )
          
          output = "agent_bootstrap_option="
          if AGENT_VERSION:
              output += f"--agent-version=2.9.46"
          output += f"\nsnap_channel=2.9/stable"
          # GitHub artifact name cannot contain "/"
          output += f'\nsnap_channel_for_artifact=2.9-stable'
          
          print(output)
          with open(os.environ["GITHUB_OUTPUT"], "a") as file:
              file.write(output)
      - name: Set up environment
        run: |
          # `--classic` applies to juju 2 snap; ignored for juju 3 snap
          sudo snap install juju --classic --channel='2.9/stable'
      - name: Set up microk8s
        if: ${{ 'microk8s' == 'microk8s' }}
        run: |
          sudo ps -aux
          sudo apt-get update
          sudo apt-get install retry -y
          sudo snap install microk8s --channel='1.28-strict/stable'
          sudo adduser "$USER" 'snap_microk8s'
          echo 'foo'
          echo $DOCKERHUB_MIRROR
          echo 'bar'
          
          # Use Docker Hub mirror to avoid rate limit
          # (https://docs.docker.com/docker-hub/download-rate-limit/)
          sudo ls -la /var/snap/microk8s/current/args/certs.d/docker.io/
          sudo tee /var/snap/microk8s/current/args/certs.d/docker.io/hosts.toml << EOF
          server = "$DOCKERHUB_MIRROR"
          [host."$DOCKERHUB_MIRROR"]
          capabilities = ["pull", "resolve"]
          EOF
          sg '${{ steps.parse-cloud.outputs.group }}' -c "sudo microk8s stop"
          sg '${{ steps.parse-cloud.outputs.group }}' -c "sudo microk8s start"
          
          # `newgrp` does not work in GitHub Actions; use `sg` instead
          sg '${{ steps.parse-cloud.outputs.group }}' -c "microk8s status --wait-ready"
          sg '${{ steps.parse-cloud.outputs.group }}' -c "retry --times 3 --delay 5 -- sudo microk8s enable dns"
          sg '${{ steps.parse-cloud.outputs.group }}' -c "microk8s status --wait-ready"
          sg '${{ steps.parse-cloud.outputs.group }}' -c "microk8s.kubectl rollout status --namespace kube-system --watch --timeout=5m deployments/coredns"
          sg '${{ steps.parse-cloud.outputs.group }}' -c "retry --times 3 --delay 5 -- sudo microk8s enable hostpath-storage"
          sg '${{ steps.parse-cloud.outputs.group }}' -c "microk8s.kubectl rollout status --namespace kube-system --watch --timeout=5m deployments/hostpath-provisioner"
          mkdir ~/.kube
          # Used by lightkube and kubernetes (Python package)
          sg '${{ steps.parse-cloud.outputs.group }}' -c "microk8s config > ~/.kube/config"
      # - run: snap list
      # - name: Set up environment
      #   run: |
      #     mkdir -p ~/.local/share/juju  # Workaround for juju 3 strict snap
      #     sg '${{ steps.parse-cloud.outputs.group }}' -c "juju bootstrap 'microk8s' '${{ steps.parse-versions.outputs.agent_bootstrap_option }}'"
      # - name: (self-hosted) Set up Juju proxy config
      #   if: ${{ matrix.groups.self_hosted }}
      #   # `https-proxy` sets `HTTPS_PROXY` environment variable inside Juju machines
      #   # (same for `http-proxy` -> `HTTP_PROXY` and `no-proxy` -> `NO_PROXY`)
      #   # Self-hosted runners require proxy
      #   run: juju model-defaults http-proxy="$HTTP_PROXY" https-proxy="$HTTPS_PROXY" no-proxy="$NO_PROXY"
      - name: Create the Mattermost Message
        if: ${{ failure() }}
        run: |
          echo "{\"text\":\"@yanks test failed!\"}" > mattermost.json
      - name: Send mattermost message
        if: ${{ failure() }}
        uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_NOTIFICATION_URL }}
      - name: tmate
        if: ${{ failure() }}
        uses: canonical/action-tmate@main
